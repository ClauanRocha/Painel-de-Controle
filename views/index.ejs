<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" type="image/png" href="/images/favicon.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>
<body class="light-mode">
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <img src="/images/logo.png" alt="Logo">
                <span>Painel de Estoque</span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">Gráficos</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/report">Relatórios</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/pedidos">Pedidos</a>
                    </li>
                    <li class="nav-item">
                        <button id="toggleTheme" class="btn btn-outline-primary ms-3">
                            <i id="themeIcon" class="fas fa-moon"></i>
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container my-5">
        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="chart-card shadow p-3 rounded">
                    <h5 class="chart-title">Produtos mais Vendidos</h5>
                    <canvas id="chartTotalStock"></canvas>
                </div>
            </div>
            <div class="col-md-6 mb-4">
                <div class="chart-card shadow p-3 rounded">
                    <h5 class="chart-title">Produtos Ativos x Inativos</h5>
                    <canvas id="chartActiveProducts"></canvas>
                </div>
            </div>
            <div class="col-md-12 mb-4">
                <div class="chart-card shadow p-3 rounded">
                    <h5 class="chart-title">Vendas por Marketplace</h5>
                    <canvas id="chartProductsByLocation"></canvas>
                </div>
            </div>
            <div class="col-md-6 mb-4">
                <div class="chart-card shadow p-3 rounded">
                    <h5 class="chart-title">Top 10 Produtos com Maior Estoque</h5>
                    <canvas id="chartTopProducts"></canvas>
                </div>
            </div>
            <div class="col-md-6 mb-4">
                <div class="chart-card shadow p-3 rounded">
                    <h5 class="chart-title">Top 10 Produtos com Menor Estoque</h5>
                    <canvas id="chartLowStockProducts"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Alternância entre modo claro e escuro
        const toggleThemeButton = document.getElementById('toggleTheme');
        const themeIcon = document.getElementById('themeIcon');
        const body = document.body;

        // Carrega o tema salvo no localStorage
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            body.className = savedTheme;
            themeIcon.className = savedTheme === 'dark-mode' ? 'fas fa-sun' : 'fas fa-moon';
        }

        // Alterna entre os temas
        toggleThemeButton.addEventListener('click', () => {
            if (body.classList.contains('light-mode')) {
                body.classList.replace('light-mode', 'dark-mode');
                localStorage.setItem('theme', 'dark-mode');
                themeIcon.className = 'fas fa-sun'; // Ícone de Sol
            } else {
                body.classList.replace('dark-mode', 'light-mode');
                localStorage.setItem('theme', 'light-mode');
                themeIcon.className = 'fas fa-moon'; // Ícone de Lua
            }
        });

        // Gráficos existentes
        const totalProducts = <%- totalProducts %>;
        const activeProducts = <%- activeProducts %>;
        const totalStock = <%- totalStock %>;
        const productsByLocation = <%- JSON.stringify(productsByLocation) %>;
        const topProducts = <%- JSON.stringify(topProducts) %>;
        const lowStockProducts = <%- JSON.stringify(lowStockProducts) %>;

// Gráfico 1: Produtos Mais Vendidos
async function fetchTopSellingProducts() {
    try {
        // Faz a requisição para a rota da API
        const response = await fetch('/api/Orders/');
        if (!response.ok) {
            throw new Error(`Erro ao buscar dados de pedidos: ${response.statusText}`);
        }

        // Recebe os dados retornados pela API
        const orders = await response.json();

        // Processa os dados para calcular os produtos mais vendidos
        const productSales = {};

        orders.forEach(order => {
            order.orderItems.forEach(item => {
                const productName = item.name || 'Produto Desconhecido';
                const quantity = item.quantity || 0;

                // Acumula as vendas por produto
                productSales[productName] = (productSales[productName] || 0) + quantity;
            });
        });

        // Extrai os dados para o gráfico
        const productLabels = Object.keys(productSales); // Nomes dos produtos
        const productQuantities = Object.values(productSales); // Quantidades vendidas

        // Gera cores dinâmicas para os gráficos
        const backgroundColors = productLabels.map((_, index) => {
            const hue = (index * 40) % 360;
            return `hsl(${hue}, 70%, 50%)`;
        });

        // Configura o gráfico
        const ctx1 = document.getElementById('chartTotalStock').getContext('2d');
        new Chart(ctx1, {
            type: 'doughnut',
            data: {
                labels: productLabels,
                datasets: [{
                    data: productQuantities,
                    backgroundColor: backgroundColors,
                    borderColor: '#ffffff',
                    borderWidth: 0,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const productName = context.label || 'Produto Desconhecido';
                                const quantity = context.raw.toLocaleString('pt-BR');
                                return `Quantidade: ${quantity}`;
                            },
                            title: function(tooltipItems) {
                                // Mostra o nome do produto no título do tooltip
                                return tooltipItems[0].label || '';
                            }
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('Erro ao carregar produtos mais vendidos:', error.message);
    }
}

// Chama a função para carregar o gráfico
fetchTopSellingProducts();


        // Gráfico 2: Produtos Ativos x Inativos
        const ctx2 = document.getElementById('chartActiveProducts').getContext('2d');
        new Chart(ctx2, {
            type: 'pie',
            data: {
                labels: ['Produtos Ativos', 'Produtos Inativos'],
                datasets: [{
                    data: [activeProducts, totalProducts - activeProducts],
                    backgroundColor: ['#28a745', '#dc3545'],
                    borderColor: ['#ffffff', '#ffffff'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                    }
                }
            }
        });

        // Função para buscar dados dos marketplaces
        async function fetchMarketplaceIdentity() {
            try {
                const response = await fetch('/api/marketplace/identity', {
                    method: 'GET',
                });

                if (!response.ok) {
                    throw new Error(`Erro ao buscar dados de identidade dos marketplaces: ${response.statusText}`);
                }

                const marketplaceData = await response.json();
                console.log('Marketplace Identity Data:', marketplaceData);
                const marketplaceMap = {};

                marketplaceData.forEach(marketplace => {
                    marketplaceMap[marketplace.code] = marketplace.name;
                });

                return marketplaceMap;
            } catch (error) {
                console.error('Erro ao carregar identidades dos marketplaces:', error.message);
                return {};
            }
        }

        // Função para buscar dados de pedidos e atualizar o gráfico de Marketplace
        async function fetchMarketplaceData() {
            try {
                const marketplaceMap = await fetchMarketplaceIdentity();

                const response = await fetch('/api/Orders/', {
                    method: 'GET',
                });

                if (!response.ok) {
                    throw new Error(`Erro ao buscar dados de pedidos: ${response.statusText}`);
                }

                const data = await response.json();
                console.log('Orders Data:', data);

                // Contar as vendas por marketplace
                const marketplaceCounts = data.reduce((counts, order) => {
                    const marketplaceCode = order.marketplaceName || 'Desconhecido';
                    const marketplaceName = marketplaceMap[marketplaceCode] || marketplaceCode;
                    counts[marketplaceName] = (counts[marketplaceName] || 0) + 1;
                    return counts;
                }, {});

                console.log('Marketplace Counts:', marketplaceCounts);

                // Atualizar o gráfico
                const labels3 = Object.keys(marketplaceCounts);
                const data3 = Object.values(marketplaceCounts);

                const ctx3 = document.getElementById('chartProductsByLocation').getContext('2d');
                new Chart(ctx3, {
                    type: 'bar',
                    data: {
                        labels: labels3,
                        datasets: [{
                            label: 'Quantidade de Vendas',
                            data: data3,
                            backgroundColor: '#007bff',
                            borderColor: '#0056b3',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false },
                        },
                        scales: {
                            y: { beginAtZero: true }
                        }
                    }
                });
            } catch (error) {
                console.error('Erro ao carregar dados do marketplace:', error.message);
            }
        }

        // Chamar a função ao carregar a página
        fetchMarketplaceData();

        // Gráfico 4: Top 10 Produtos com Maior Estoque
        const ctx4 = document.getElementById('chartTopProducts').getContext('2d');
        const labels4 = topProducts.map(product => product.DESCRICAO || 'Sem Descrição');
        const data4 = topProducts.map(product => product.QUANTIDADE || 0);

        new Chart(ctx4, {
            type: 'bar',
            data: {
                labels: labels4,
                datasets: [{
                    label: 'Quantidade',
                    data: data4,
                    backgroundColor: '#28a745',
                    borderColor: '#1e7d33',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                },
                scales: {
                    x: {
                        ticks: {
                            maxRotation: 0,
                            font: { size: 10 },
                            callback: function(value) {
                                return this.getLabelForValue(value).substr(0, 10) + '...';
                            }
                        }
                    },
                    y: { beginAtZero: true }
                }
            }
        });

        // Gráfico 5: Top 10 Produtos com Menor Estoque
        const ctx5 = document.getElementById('chartLowStockProducts').getContext('2d');
        const labels5 = lowStockProducts.map(product => product.DESCRICAO || 'Sem Descrição');
        const data5 = lowStockProducts.map(product => product.QUANTIDADE || 0);

        new Chart(ctx5, {
            type: 'bar',
            data: {
                labels: labels5,
                datasets: [{
                    label: 'Quantidades',
                    data: data5,
                    backgroundColor: '#dc3545',
                    borderColor: '#a71d2a',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                },
                scales: {
                    x: {
                        ticks: {
                            maxRotation: 0,
                            font: { size: 10 },
                            callback: function(value) {
                                return this.getLabelForValue(value).substr(0, 10) + '...';
                            }
                        }
                    },
                    y: { beginAtZero: true }
                }
            }
        });

    </script>
</body>
</html>
